import {withSourceFile} from "@use-pico/generator";
import {normalize}      from "node:path";
import {IGenerator}     from "../../api/IGenerator";

export interface IWithSelectionParams {
    selections: IWithSelectionParams.ISelection[];
}

export namespace IWithSelectionParams {
    export interface ISelection {
        /**
         * Base name exported (used to name all exported objects)
         */
        name: string;
        packages: IPackages;
    }

    export interface IPackages {
        /**
         * Package used to import all schema-related types (ISource implementation, IWhere and so on, can be generated by @pico).
         */
        schema: string;
    }
}

export const withSelection: IGenerator<IWithSelectionParams> = async (
    {
        barrel,
        directory,
        params: {selections}
    }) => {
    selections.forEach(({
                            name,
                            packages
                        }) => {
        console.log(`- Generating [withSelection] [${name}]`);

        withSourceFile()
            .withImports({
                imports: {
                    "@use-pico/selection-client": [
                        "createSelectionStore",
                    ],
                    "@use-pico/context":          [
                        "type IStoreContext",
                    ],
                    "@use-pico/selection":        [
                        "type ISelectionStoreProps",
                    ],
                },
            })
            .withImports({
                imports: {
                    [packages.schema]: [
                        `type I${name}SourceType as SourceType`,
                    ],
                }
            })
            .withTypes({
                exports: {
                    [`I${name}SelectionStore`]: `
IStoreContext<ISelectionStoreProps<SourceType["Dto"]>>
                    `,
                },
            })
            .withConsts({
                exports: {
                    [`${name}Selection`]: {
                        body: `
createSelectionStore<SourceType["Dto"]>({name: "${name}"})
                        `,
                    }
                },
            })
            .saveTo({
                file: normalize(`${directory}/selection/${name}Selection.tsx`),
                barrel,
            });

        withSourceFile()
            .withImports({
                imports: {
                    "@use-pico/selection-client": [
                        "createMultiSelectionStore",
                    ],
                    "@use-pico/context":          [
                        "type IStoreContext",
                    ],
                    "@use-pico/selection":        [
                        "type IMultiSelectionStoreProps",
                    ],
                },
            })
            .withImports({
                imports: {
                    [packages.schema]: [
                        `type I${name}SourceType as SourceType`,
                    ],
                }
            })
            .withTypes({
                exports: {
                    [`I${name}MultiSelectionStore`]: `
IStoreContext<IMultiSelectionStoreProps<SourceType["Dto"]>>
                    `,
                },
            })
            .withConsts({
                exports: {
                    [`${name}MultiSelection`]: {
                        body: `
createMultiSelectionStore<SourceType["Dto"]>({name: "${name}"})
                        `,
                    }
                },
            })
            .saveTo({
                file: normalize(`${directory}/selection/${name}MultiSelection.tsx`),
                barrel,
            });
    });
};
